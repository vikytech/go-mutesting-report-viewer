{
  "stats": {
    "totalMutantsCount": 13,
    "killedCount": 13,
    "notCoveredCount": 0,
    "escapedCount": 0,
    "errorCount": 0,
    "skippedCount": 0,
    "timeOutCount": 0,
    "msi": 1,
    "mutationCodeCoverage": 0,
    "coveredCodeMsi": 0
  },
  "escaped": null,
  "timeouted": null,
  "killed": [
    {
      "mutator": {
        "mutatorName": "arithmetic/base",
        "originalSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "mutatedSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" - err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "originalFilePath": "./go_mutesting_html_report.go",
        "originalStartLine": 0
      },
      "diff": "--- Original\n+++ New\n@@ -52,7 +52,7 @@\n \tvar data Data\n \terr = json.Unmarshal(jsonData, \u0026data)\n \tif err != nil {\n-\t\tpanic(\"Invalid JSON format: \" + err.Error())\n+\t\tpanic(\"Invalid JSON format: \" - err.Error())\n \t}\n \treturn data\n }\n",
      "processOutput": "PASS \"/var/folders/ww/syn6_3z10m394hg39k2cct400000gn/T/go-mutesting-3295575537/./go_mutesting_html_report.go.0\" with checksum 4a1ea032766ab2447f16bdaa180ce114\n"
    },
    {
      "mutator": {
        "mutatorName": "arithmetic/base",
        "originalSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "mutatedSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" - err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "originalFilePath": "./go_mutesting_html_report.go",
        "originalStartLine": 0
      },
      "diff": "--- Original\n+++ New\n@@ -61,7 +61,7 @@\n \tparsedTemplate, err := template.ParseFiles(templatePath)\n \n \tif err != nil {\n-\t\tpanic(\"Unable to parse template file: \" + err.Error())\n+\t\tpanic(\"Unable to parse template file: \" - err.Error())\n \t}\n \n \ttemplate := template.Must(parsedTemplate, err)\n",
      "processOutput": "PASS \"/var/folders/ww/syn6_3z10m394hg39k2cct400000gn/T/go-mutesting-3295575537/./go_mutesting_html_report.go.1\" with checksum 561a4790836e085a32d3bc2c4bfc1ffc\n"
    },
    {
      "mutator": {
        "mutatorName": "arithmetic/base",
        "originalSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "mutatedSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" - err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "originalFilePath": "./go_mutesting_html_report.go",
        "originalStartLine": 0
      },
      "diff": "--- Original\n+++ New\n@@ -68,7 +68,7 @@\n \n \treport, err := os.Create(outputReportFilePath)\n \tif err != nil {\n-\t\tpanic(\"Unable to create report file: \" + err.Error())\n+\t\tpanic(\"Unable to create report file: \" - err.Error())\n \t}\n \n \terr = template.Execute(report, data)\n",
      "processOutput": "PASS \"/var/folders/ww/syn6_3z10m394hg39k2cct400000gn/T/go-mutesting-3295575537/./go_mutesting_html_report.go.2\" with checksum 7a2caf696a8bf96bbbf1722256073ac0\n"
    },
    {
      "mutator": {
        "mutatorName": "arithmetic/base",
        "originalSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "mutatedSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" - err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "originalFilePath": "./go_mutesting_html_report.go",
        "originalStartLine": 0
      },
      "diff": "--- Original\n+++ New\n@@ -73,7 +73,7 @@\n \n \terr = template.Execute(report, data)\n \tif err != nil {\n-\t\tpanic(\"Error executing template: \" + err.Error())\n+\t\tpanic(\"Error executing template: \" - err.Error())\n \t}\n }\n \n",
      "processOutput": "PASS \"/var/folders/ww/syn6_3z10m394hg39k2cct400000gn/T/go-mutesting-3295575537/./go_mutesting_html_report.go.3\" with checksum eb89063e2d61b85545c74e8c1507143c\n"
    },
    {
      "mutator": {
        "mutatorName": "branch/if",
        "originalSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "mutatedSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\t_, _ = log.Panicf, err.Error\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "originalFilePath": "./go_mutesting_html_report.go",
        "originalStartLine": 0
      },
      "diff": "--- Original\n+++ New\n@@ -46,7 +46,7 @@\n func readJson(filePath string) Data {\n \tjsonData, err := os.ReadFile(filePath)\n \tif err != nil {\n-\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n+\t\t_, _ = log.Panicf, err.Error\n \t}\n \n \tvar data Data\n",
      "processOutput": "PASS \"/var/folders/ww/syn6_3z10m394hg39k2cct400000gn/T/go-mutesting-3295575537/./go_mutesting_html_report.go.4\" with checksum 6bd61222bfed2161c4e48118a67ebf74\n"
    },
    {
      "mutator": {
        "mutatorName": "branch/if",
        "originalSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "mutatedSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\t_ = err.Error\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "originalFilePath": "./go_mutesting_html_report.go",
        "originalStartLine": 0
      },
      "diff": "--- Original\n+++ New\n@@ -52,7 +52,7 @@\n \tvar data Data\n \terr = json.Unmarshal(jsonData, \u0026data)\n \tif err != nil {\n-\t\tpanic(\"Invalid JSON format: \" + err.Error())\n+\t\t_ = err.Error\n \t}\n \treturn data\n }\n",
      "processOutput": "PASS \"/var/folders/ww/syn6_3z10m394hg39k2cct400000gn/T/go-mutesting-3295575537/./go_mutesting_html_report.go.5\" with checksum 81c711fe09c16b7b090c9662350e1c90\n"
    },
    {
      "mutator": {
        "mutatorName": "branch/if",
        "originalSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "mutatedSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\t_ = err.Error\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "originalFilePath": "./go_mutesting_html_report.go",
        "originalStartLine": 0
      },
      "diff": "--- Original\n+++ New\n@@ -61,7 +61,7 @@\n \tparsedTemplate, err := template.ParseFiles(templatePath)\n \n \tif err != nil {\n-\t\tpanic(\"Unable to parse template file: \" + err.Error())\n+\t\t_ = err.Error\n \t}\n \n \ttemplate := template.Must(parsedTemplate, err)\n",
      "processOutput": "PASS \"/var/folders/ww/syn6_3z10m394hg39k2cct400000gn/T/go-mutesting-3295575537/./go_mutesting_html_report.go.6\" with checksum 1a061e72dc29d30b38387acced21626a\n"
    },
    {
      "mutator": {
        "mutatorName": "branch/if",
        "originalSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "mutatedSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\t_ = err.Error\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "originalFilePath": "./go_mutesting_html_report.go",
        "originalStartLine": 0
      },
      "diff": "--- Original\n+++ New\n@@ -68,7 +68,7 @@\n \n \treport, err := os.Create(outputReportFilePath)\n \tif err != nil {\n-\t\tpanic(\"Unable to create report file: \" + err.Error())\n+\t\t_ = err.Error\n \t}\n \n \terr = template.Execute(report, data)\n",
      "processOutput": "PASS \"/var/folders/ww/syn6_3z10m394hg39k2cct400000gn/T/go-mutesting-3295575537/./go_mutesting_html_report.go.7\" with checksum 3af9038364564e64559bae7cd2c6d7d7\n"
    },
    {
      "mutator": {
        "mutatorName": "branch/if",
        "originalSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "mutatedSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\t_ = err.Error\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "originalFilePath": "./go_mutesting_html_report.go",
        "originalStartLine": 0
      },
      "diff": "--- Original\n+++ New\n@@ -73,7 +73,7 @@\n \n \terr = template.Execute(report, data)\n \tif err != nil {\n-\t\tpanic(\"Error executing template: \" + err.Error())\n+\t\t_ = err.Error\n \t}\n }\n \n",
      "processOutput": "PASS \"/var/folders/ww/syn6_3z10m394hg39k2cct400000gn/T/go-mutesting-3295575537/./go_mutesting_html_report.go.8\" with checksum f5110d81001fd54934d875f9d049f566\n"
    },
    {
      "mutator": {
        "mutatorName": "statement/remove",
        "originalSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "mutatedSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\t_, _, _, _ = err, json.Unmarshal, jsonData, data\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "originalFilePath": "./go_mutesting_html_report.go",
        "originalStartLine": 0
      },
      "diff": "--- Original\n+++ New\n@@ -50,7 +50,7 @@\n \t}\n \n \tvar data Data\n-\terr = json.Unmarshal(jsonData, \u0026data)\n+\t_, _, _, _ = err, json.Unmarshal, jsonData, data\n \tif err != nil {\n \t\tpanic(\"Invalid JSON format: \" + err.Error())\n \t}\n",
      "processOutput": "PASS \"/var/folders/ww/syn6_3z10m394hg39k2cct400000gn/T/go-mutesting-3295575537/./go_mutesting_html_report.go.9\" with checksum 0e2e1437861ed462be1709033ed713eb\n"
    },
    {
      "mutator": {
        "mutatorName": "statement/remove",
        "originalSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "mutatedSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\t_, _, _, _ = err, template.Execute, report, data\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "originalFilePath": "./go_mutesting_html_report.go",
        "originalStartLine": 0
      },
      "diff": "--- Original\n+++ New\n@@ -70,8 +70,7 @@\n \tif err != nil {\n \t\tpanic(\"Unable to create report file: \" + err.Error())\n \t}\n-\n-\terr = template.Execute(report, data)\n+\t_, _, _, _ = err, template.Execute, report, data\n \tif err != nil {\n \t\tpanic(\"Error executing template: \" + err.Error())\n \t}\n",
      "processOutput": "PASS \"/var/folders/ww/syn6_3z10m394hg39k2cct400000gn/T/go-mutesting-3295575537/./go_mutesting_html_report.go.12\" with checksum 51ba4548b7bf88b2f84ec54e915de3d8\n"
    },
    {
      "mutator": {
        "mutatorName": "statement/remove",
        "originalSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "mutatedSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\t_ = flag.Parse\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "originalFilePath": "./go_mutesting_html_report.go",
        "originalStartLine": 0
      },
      "diff": "--- Original\n+++ New\n@@ -81,7 +81,7 @@\n \tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n \ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n \treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n-\tflag.Parse()\n+\t_ = flag.Parse\n \n \tdata := readJson(*jsonFilePath)\n \texecuteTemplate(data, *templatePath, *reportPath)\n",
      "processOutput": "PASS \"/var/folders/ww/syn6_3z10m394hg39k2cct400000gn/T/go-mutesting-3295575537/./go_mutesting_html_report.go.16\" with checksum f8a4971d6cfd01ca348a21f28d331a13\n"
    },
    {
      "mutator": {
        "mutatorName": "statement/remove",
        "originalSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\texecuteTemplate(data, *templatePath, *reportPath)\n}\n",
        "mutatedSourceCode": "package main\n\nimport (\n\t\"encoding/json\"\n\t\"flag\"\n\t\"html/template\"\n\t\"log\"\n\t\"os\"\n)\n\ntype Mutator struct {\n\tMutatorName        string `json:\"mutatorName\"`\n\tOriginalSourceCode string `json:\"originalSourceCode\"`\n\tMutatedSourceCode  string `json:\"mutatedSourceCode\"`\n\tOriginalFilePath   string `json:\"originalFilePath\"`\n\tOriginalStartLine  int    `json:\"originalStartLine\"`\n}\n\ntype Entry struct {\n\tMutator       Mutator `json:\"mutator\"`\n\tDiff          string  `json:\"diff\"`\n\tProcessOutput string  `json:\"processOutput\"`\n}\n\ntype Stats struct {\n\tTotalMutantsCount    int     `json:\"totalMutantsCount\"`\n\tKilledCount          int     `json:\"killedCount\"`\n\tNotCoveredCount      int     `json:\"notCoveredCount\"`\n\tEscapedCount         int     `json:\"escapedCount\"`\n\tErrorCount           int     `json:\"errorCount\"`\n\tSkippedCount         int     `json:\"skippedCount\"`\n\tTimeOutCount         int     `json:\"timeOutCount\"`\n\tMsi                  float64 `json:\"msi\"`\n\tMutationCodeCoverage float64 `json:\"mutationCodeCoverage\"`\n\tCoveredCodeMsi       float64 `json:\"coveredCodeMsi\"`\n}\n\ntype Data struct {\n\tStats     Stats       `json:\"stats\"`\n\tEscaped   []Entry     `json:\"escaped\"`\n\tTimeouted interface{} `json:\"timeouted\"`\n\tKilled    []Entry     `json:\"killed\"`\n\tErrored   interface{} `json:\"errored\"`\n}\n\nfunc readJson(filePath string) Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc executeTemplate(data Data, templatePath string, outputReportFilePath string) {\n\tparsedTemplate, err := template.ParseFiles(templatePath)\n\n\tif err != nil {\n\t\tpanic(\"Unable to parse template file: \" + err.Error())\n\t}\n\n\ttemplate := template.Must(parsedTemplate, err)\n\n\treport, err := os.Create(outputReportFilePath)\n\tif err != nil {\n\t\tpanic(\"Unable to create report file: \" + err.Error())\n\t}\n\n\terr = template.Execute(report, data)\n\tif err != nil {\n\t\tpanic(\"Error executing template: \" + err.Error())\n\t}\n}\n\nfunc main() {\n\tjsonFilePath := flag.String(\"file\", \"report.json\", \"Provide report.json:: -file \u003cPATH_TO_JSON_REPORT\u003e\")\n\ttemplatePath := flag.String(\"template\", \"report.tmpl\", \"Provide template path:: -template \u003cPATH_TO_TEMPLATE\u003e\")\n\treportPath := flag.String(\"out\", \"report.html\", \"Provide report output path:: -out \u003cPATH_TO_OUTPUT_HTML_REPORT\u003e\")\n\tflag.Parse()\n\n\tdata := readJson(*jsonFilePath)\n\t_, _, _ = data, templatePath, reportPath\n\n}\n",
        "originalFilePath": "./go_mutesting_html_report.go",
        "originalStartLine": 0
      },
      "diff": "--- Original\n+++ New\n@@ -84,5 +84,6 @@\n \tflag.Parse()\n \n \tdata := readJson(*jsonFilePath)\n-\texecuteTemplate(data, *templatePath, *reportPath)\n+\t_, _, _ = data, templatePath, reportPath\n+\n }\n",
      "processOutput": "PASS \"/var/folders/ww/syn6_3z10m394hg39k2cct400000gn/T/go-mutesting-3295575537/./go_mutesting_html_report.go.17\" with checksum e1d78311f2ed60b78665a24cc13502d5\n"
    }
  ],
  "errored": null
}

{"stats":{"totalMutantsCount":20,"killedCount":20,"notCoveredCount":0,"escapedCount":0,"errorCount":0,"skippedCount":0,"timeOutCount":0,"msi":1,"mutationCodeCoverage":0,"coveredCodeMsi":0},"escaped":null,"timeouted":null,"killed":[{"mutator":{"mutatorName":"arithmetic/base","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" - err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -17,7 +17,7 @@\n \tvar data models.Data\n \terr = json.Unmarshal(jsonData, \u0026data)\n \tif err != nil {\n-\t\tpanic(\"Invalid JSON format: \" + err.Error())\n+\t\tpanic(\"Invalid JSON format: \" - err.Error())\n \t}\n \treturn data\n }\n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.0\" with checksum 64d8b5dc8fa0a12496ecda71f27784cc\n"},{"mutator":{"mutatorName":"arithmetic/base","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" - err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -31,7 +31,7 @@\n \tvar data models.Report\n \terr = json.Unmarshal(jsonData, \u0026data)\n \tif err != nil {\n-\t\tpanic(\"Invalid JSON format: \" + err.Error())\n+\t\tpanic(\"Invalid JSON format: \" - err.Error())\n \t}\n \treturn data\n }\n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.1\" with checksum d63da1257950c080d8a43d9b6d8f7db4\n"},{"mutator":{"mutatorName":"arithmetic/bitwise","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND\u0026os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -49,7 +49,7 @@\n \t\terror.Error(err)\n \t}\n \n-\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n+\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND\u0026os.O_WRONLY, os.ModeAppend)\n \tif _, err := file.WriteString(content); err != nil {\n \t\terror.Error(err)\n \t}\n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.2\" with checksum e9ba912dd5f2d20e5ea5fd4c6dcdbaf4\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\t_, _ = log.Panicf, err.Error\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -11,7 +11,7 @@\n func readSingleJsonReportFile(filePath string) models.Data {\n \tjsonData, err := os.ReadFile(filePath)\n \tif err != nil {\n-\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n+\t\t_, _ = log.Panicf, err.Error\n \t}\n \n \tvar data models.Data\n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.3\" with checksum 97005f1007e5c21ae6483d2af6803d03\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\t_ = err.Error\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -17,7 +17,7 @@\n \tvar data models.Data\n \terr = json.Unmarshal(jsonData, \u0026data)\n \tif err != nil {\n-\t\tpanic(\"Invalid JSON format: \" + err.Error())\n+\t\t_ = err.Error\n \t}\n \treturn data\n }\n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.4\" with checksum 19fac93bd3e6006782a32e63cb9b0cc5\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\t_, _ = log.Panicf, err.Error\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -25,7 +25,7 @@\n func readGlobalJsonReportFile(filePath string) models.Report {\n \tjsonData, err := os.ReadFile(filePath)\n \tif err != nil {\n-\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n+\t\t_, _ = log.Panicf, err.Error\n \t}\n \n \tvar data models.Report\n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.5\" with checksum 5d0951414da38feea8a73f5a470c974a\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\t_ = err.Error\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -31,7 +31,7 @@\n \tvar data models.Report\n \terr = json.Unmarshal(jsonData, \u0026data)\n \tif err != nil {\n-\t\tpanic(\"Invalid JSON format: \" + err.Error())\n+\t\t_ = err.Error\n \t}\n \treturn data\n }\n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.6\" with checksum 3e9fdd84afc7e135acbef84413825364\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\t_, _ = error.Error, err\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -46,7 +46,7 @@\n func writeReportToFile(content string) {\n \ttempFile, err := os.Create(\"./reports/reports.json\")\n \tif err != nil {\n-\t\terror.Error(err)\n+\t\t_, _ = error.Error, err\n \t}\n \n \tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.7\" with checksum 622643cff733e8b17f82a3b4fa324c79\n"},{"mutator":{"mutatorName":"branch/if","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\t_, _ = error.Error, err\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -51,7 +51,7 @@\n \n \tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n \tif _, err := file.WriteString(content); err != nil {\n-\t\terror.Error(err)\n+\t\t_, _ = error.Error, err\n \t}\n \tdefer file.Close()\n }\n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.8\" with checksum dfc7aa9246ca858fef2047a0b22a0aa0\n"},{"mutator":{"mutatorName":"loop/range_break","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tbreak\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -62,6 +62,7 @@\n \tkilled := data.Killed\n \n \tfor _, escapedMutantEntry := range escaped {\n+\t\tbreak\n \t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n \t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n \t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.9\" with checksum 4ad8d27d842559e9ae2462226067f100\n"},{"mutator":{"mutatorName":"loop/range_break","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tbreak\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -70,6 +70,7 @@\n \t}\n \n \tfor _, killedMutantEntry := range killed {\n+\t\tbreak\n \t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n \t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n \t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.10\" with checksum 1b7d67f5c92517be824afef130746a75\n"},{"mutator":{"mutatorName":"numbers/decrementer","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[3]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -63,7 +63,7 @@\n \n \tfor _, escapedMutantEntry := range escaped {\n \t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n-\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n+\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[3]}\n \t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n \t\tupdatedEntry := append(escapedEntry, entry)\n \t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.11\" with checksum dfbba27d68642c80a961408193bcb534\n"},{"mutator":{"mutatorName":"numbers/decrementer","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[3]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -71,7 +71,7 @@\n \n \tfor _, killedMutantEntry := range killed {\n \t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n-\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n+\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[3]}\n \t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n \t\tupdatedEntry := append(killedEntry, entry)\n \t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.12\" with checksum 2123bbd95a08ed03258492a4c046e086\n"},{"mutator":{"mutatorName":"numbers/incrementer","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[5]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -63,7 +63,7 @@\n \n \tfor _, escapedMutantEntry := range escaped {\n \t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n-\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n+\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[5]}\n \t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n \t\tupdatedEntry := append(escapedEntry, entry)\n \t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.13\" with checksum 44e89fb8f75823673e4114c82d4b44ed\n"},{"mutator":{"mutatorName":"numbers/incrementer","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[5]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -71,7 +71,7 @@\n \n \tfor _, killedMutantEntry := range killed {\n \t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n-\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n+\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[5]}\n \t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n \t\tupdatedEntry := append(killedEntry, entry)\n \t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.14\" with checksum db4a61b3e21904187e0c8c70a4aac653\n"},{"mutator":{"mutatorName":"statement/remove","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\t_, _, _, _ = err, json.Unmarshal, jsonData, data\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -15,7 +15,7 @@\n \t}\n \n \tvar data models.Data\n-\terr = json.Unmarshal(jsonData, \u0026data)\n+\t_, _, _, _ = err, json.Unmarshal, jsonData, data\n \tif err != nil {\n \t\tpanic(\"Invalid JSON format: \" + err.Error())\n \t}\n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.15\" with checksum 35c57b3a8e742b70ceaba652e4bf0340\n"},{"mutator":{"mutatorName":"statement/remove","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\t_, _, _, _ = err, json.Unmarshal, jsonData, data\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -29,7 +29,7 @@\n \t}\n \n \tvar data models.Report\n-\terr = json.Unmarshal(jsonData, \u0026data)\n+\t_, _, _, _ = err, json.Unmarshal, jsonData, data\n \tif err != nil {\n \t\tpanic(\"Invalid JSON format: \" + err.Error())\n \t}\n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.18\" with checksum f0d77ad7f2c0d0bb06a91deff18867b4\n"},{"mutator":{"mutatorName":"statement/remove","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\t_ = jsonReport\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -39,7 +39,7 @@\n func exportReportsToJson(reports models.Report) {\n \n \tjsonReport, _ := json.Marshal(reports)\n-\twriteReportToFile(string(jsonReport))\n+\t_ = jsonReport\n \n }\n \n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.21\" with checksum f8f944d730b7ca81795df497e7cce064\n"},{"mutator":{"mutatorName":"statement/remove","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\t_, _, _, _, _ = fileMap, escapedMutantEntry.Mutator.OriginalFilePath, models.ReportDetails, Escaped, updatedEntry\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -66,7 +66,7 @@\n \t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n \t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n \t\tupdatedEntry := append(escapedEntry, entry)\n-\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n+\t\t_, _, _, _, _ = fileMap, escapedMutantEntry.Mutator.OriginalFilePath, models.ReportDetails, Escaped, updatedEntry\n \t}\n \n \tfor _, killedMutantEntry := range killed {\n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.24\" with checksum fd3ec21e36bf4e42c051bb9d7cbb7ddf\n"},{"mutator":{"mutatorName":"statement/remove","originalSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","mutatedSourceCode":"package main\n\nimport (\n\t\"encoding/json\"\n\tmodels \"gomutestingrhtmlreport/models\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfunc readSingleJsonReportFile(filePath string) models.Data {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Data\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc readGlobalJsonReportFile(filePath string) models.Report {\n\tjsonData, err := os.ReadFile(filePath)\n\tif err != nil {\n\t\tlog.Panicf(\"Error reading file: %s\", err.Error())\n\t}\n\n\tvar data models.Report\n\terr = json.Unmarshal(jsonData, \u0026data)\n\tif err != nil {\n\t\tpanic(\"Invalid JSON format: \" + err.Error())\n\t}\n\treturn data\n}\n\nfunc exportReportsToJson(reports models.Report) {\n\n\tjsonReport, _ := json.Marshal(reports)\n\twriteReportToFile(string(jsonReport))\n\n}\n\nfunc writeReportToFile(content string) {\n\ttempFile, err := os.Create(\"./reports/reports.json\")\n\tif err != nil {\n\t\terror.Error(err)\n\t}\n\n\tfile, _ := os.OpenFile(tempFile.Name(), os.O_APPEND|os.O_WRONLY, os.ModeAppend)\n\tif _, err := file.WriteString(content); err != nil {\n\t\terror.Error(err)\n\t}\n\tdefer file.Close()\n}\n\nfunc groupByFile(data models.Data) models.Report {\n\tfileMap := make(map[string]models.ReportDetails)\n\tescaped := data.Escaped\n\tkilled := data.Killed\n\n\tfor _, escapedMutantEntry := range escaped {\n\t\tout := strings.Split(escapedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: escapedMutantEntry.Mutator.MutatorName, Diff: escapedMutantEntry.Diff, Checksum: out[4]}\n\t\tescapedEntry := fileMap[escapedMutantEntry.Mutator.OriginalFilePath].Escaped\n\t\tupdatedEntry := append(escapedEntry, entry)\n\t\tfileMap[escapedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: updatedEntry}\n\t}\n\n\tfor _, killedMutantEntry := range killed {\n\t\tout := strings.Split(killedMutantEntry.ProcessOutput, \" \")\n\t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n\t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n\t\tupdatedEntry := append(killedEntry, entry)\n\t\t_, _, _, _, _, _ = fileMap, killedMutantEntry.Mutator.OriginalFilePath, models.ReportDetails, Escaped, Killed, updatedEntry\n\t}\n\n\t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n\t// fileMap[\"sks\"].Stats = data.Stats\n\n\treturn models.Report{Stats: data.Stats, ReportDetail: fileMap}\n}\n","originalFilePath":"utils.go","originalStartLine":0},"diff":"--- Original\n+++ New\n@@ -74,7 +74,7 @@\n \t\tentry := models.MutatorDetail{MutatorName: killedMutantEntry.Mutator.MutatorName, Diff: killedMutantEntry.Diff, Checksum: out[4]}\n \t\tkilledEntry := fileMap[killedMutantEntry.Mutator.OriginalFilePath].Killed\n \t\tupdatedEntry := append(killedEntry, entry)\n-\t\tfileMap[killedMutantEntry.Mutator.OriginalFilePath] = models.ReportDetails{Escaped: fileMap[killedMutantEntry.Mutator.OriginalFilePath].Escaped, Killed: updatedEntry}\n+\t\t_, _, _, _, _, _ = fileMap, killedMutantEntry.Mutator.OriginalFilePath, models.ReportDetails, Escaped, Killed, updatedEntry\n \t}\n \n \t// fileMap[\"0jj\"].Stats.Msi = data.Stats.Msi\n","processOutput":"PASS \"/var/folders/y_/rcm9fbdn27d9plc8hdd5pttw0000gq/T/go-mutesting-922241023/utils.go.25\" with checksum 022661ba71807da6751039d3aa109a67\n"}],"errored":null}